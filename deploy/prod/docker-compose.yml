version: "3.9"

services:
  postgres:
    image: postgres
    restart: always
    hostname: postgres_kaimono
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: kaimono
      POSTGRES_PASSWORD: lksdflkma12ke0291
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis
    restart: always
    hostname: redis_kaimono
    command: redis-server --requirepass akmsdokm124j90
    ports:
      - "6355:6379"
    volumes:
      - redis_data:/usr/local/etc/redis

  web:
    container_name: web-kaimon-dev
    restart: always
    build:
      context: ../../
    links:
      - "postgres:postgres_kaimono"
      - "redis:redis_kaimono"
    entrypoint: [ "bash", "./deploy/entrypoint.sh" ]
    env_file:
      - ../../.env
    expose:
      - "8334"
    volumes:
      - static:/app/static
      - media:/app/media

  nginx:
    container_name: nginx-kaimon
    build:
      context: ../../
      dockerfile: deploy/prod/nginx.Dockerfile
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - static:/app/static
      - media:/app/media
      - ../../certbot/conf:/etc/letsencrypt
      - ../../certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    env_file:
      - .env

  certbot:
    container_name: certbot-kaimon
    image: certbot/certbot
    restart: unless-stopped
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ../../certbot/conf:/etc/letsencrypt
      - ../../certbot/www:/var/www/certbot

  celery-default:
    container_name: celery-default
    hostname: celery-default
    restart: always
    build:
      context: ../../
    links:
      - "postgres:postgres_kaimono"
      - "redis:redis_kaimono"
    command: celery --app kaimon worker -Q default -c 4 --loglevel=info
    env_file:
      - ../../.env
    depends_on:
      - web

  celery-beat:
    container_name: celery-beat
    restart: always
    build:
      context: ../../
    links:
      - "postgres:postgres_kaimono"
      - "redis:redis_kaimono"
    command: celery --app kaimon beat --loglevel=info
    env_file:
      - ../../.env
    depends_on:
      - web

  celery-mailing:
    container_name: celery-mailing
    hostname: celery-mailing
    restart: always
    build:
      context: ../../
    links:
      - "postgres:postgres_kaimono"
      - "redis:redis_kaimono"
    command: celery --app kaimon worker -Q mailing -c 1 --loglevel=info
    env_file:
      - ../../.env
    depends_on:
      - web

  celery-rakuten-requests:
    container_name: celery-rakuten-requests
    hostname: celery-rakuten-requests
    restart: always
    build:
      context: ../../
    links:
      - "postgres:postgres_kaimono"
      - "redis:redis_kaimono"
    command: celery --app kaimon worker -Q rakuten_requests -c 3 --loglevel=info
    env_file:
      - ../../.env
    depends_on:
      - web

  celery-item-saving:
    container_name: celery-item-saving
    hostname: celery-item-saving
    restart: always
    build:
      context: ../../
    links:
      - "postgres:postgres_kaimono"
      - "redis:redis_kaimono"
    command: celery --app kaimon worker -Q item_saving -c 10 --loglevel=info
    env_file:
      - ../../.env
    depends_on:
      - web

  celery-translating:
    container_name: celery-translating
    hostname: celery-translating
    restart: always
    build:
      context: ../../
    links:
      - "postgres:postgres_kaimono"
      - "redis:redis_kaimono"
    command: celery --app kaimon worker -Q translating -c 1 --loglevel=info
    env_file:
      - ../../.env
    depends_on:
      - web

volumes:
  redis_data:
  postgres_data:
  static:
  media:
